syntax = "proto3";
package bytedance.byteplus.rec.retail;
option java_package = "com.byteplus.rec.sdk.retail.protocol";
option go_package = "github.com/byteplus-sdk/byteplus-sdk-go-rec/retail/protocol";

// The `Status` type defines a logical error model, Each `Status` message
// contains 2 pieces of data: error code, error message.
/// Chinese version.
///
message Status {
  // Output only.
  // The error code. Callers should expect this field for all
  // responses.
  // Here is the table for the possible codes.
  // 0   : The request is successfully returned. Other values indicates errors.
  // xxx : The 3-digit error codes align with standard http error codes, e.g.
  //       4xx indicates user error while 5xx indicates server error.
  // 1xxx: The errors related to Import calls.
  // 2xxx: The errors related to Predict calls.
  // Please refer to [this](../docs/error-code) for more details.
  int32 code = 1;

  // Output only. Detailed error message.
  string message = 2;

  // Output only. success mark
  bool success = 3;
}

// Represents a whole or partial calendar date, such as a birthday. The time of
// day and time zone are either specified elsewhere or are insignificant. The
// date is relative to the Gregorian Calendar. This can represent one of the
// following:
//
// * A full date, with non-zero year, month, and day values
// * A month and day value, with a zero year, such as an anniversary
// * A year on its own, with zero month and day values
// * A year and month value, with a zero day, such as a credit card expiration
// date
message Date {
  // Year of the date. Must be from 1 to 9999, or 0 to specify a date without
  // a year.
  int32 year = 1;

  // Month of a year. Must be from 1 to 12, or 0 to specify a year without a
  // month and day.
  int32 month = 2;

  // Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
  // to specify a year by itself or a year and month where the day isn't
  // significant.
  int32 day = 3;
}


message FinishWriteDataRequest{
  // Required
  // Id of the recommendation project.
  string project_id = 1;

  // Required
  // The stage of importing data，Corresponding to the three synchronization stages of the recommendation platform
  // Possible type values:
  // "trial":Test data/pre-synchronization stage
  // "historical":Historical data synchronization stage
  // "incremental":Incremental real-time data synchronization stage
  string stage = 2;

  // Optional.
  // topic is datatype, which specify the type of data users are going to write.
  // in WriteOthers, topic should not be missing in request, In other cases, the topic can be omitted.
  // The acceptable values are "user", "goods", "behavior", and "others"
  // user: user data
  // goods: product data
  // behavior: user event data
  // others: It is temporarily set to "others", the specific value depends on your need.
  string topic = 3;

  // Optional.
  // When finish user events, data_dates should not be missing
  repeated Date data_dates = 10;
}

// The product proto.
message Product {
  // Required.
  // The unique identifier for the product.
  // [link to best practices on deciding product ids](./ways-to-improve-recommendation-performance)
  string product_id = 1;

  // Optional.
  // 1 if the product is recommendable (i.e. to return the product in the recommendation result).
  // Note: Even if a product isn't recommendable, please include it still.
  // the is because that users might have interacted with such product in the past, hence providing insights into behavioural propensities.
  int32 is_recommendable = 2;

  // Optional.
  // The current/displayed/discounted price of the product. Round to 2.d.p.
  float current_price = 3;

  // Optional.
  // The original price of the product. Round to 2.d.p.
  float original_price = 4;

  // Optional.
  // The timestamp when the product was published.
  int64 publish_timestamp = 5;

  // Optional.
  // The (sub)categories the content fall under. Format requirements:
  //  1. JSON serialised string
  //  2. Depth starts from 1, in consecutive postive integers
  //  3. "Category_nodes" should not contain empty value. If empty value exists, replace with "null" .
  //  4. Only one "id_or_name" key-value pair is allowed under each "category_nodes"
  // For example, if a product has "Shoes -> Men's Shoes -> Basketball Shoes"
  // This should be:
  // [
  //   {"category_depth":1,
  //    "category_nodes": [{"id_or_name":"Shoes"}] },
  //   {"category_depth":2,
  //    "category_nodes": [{"id_or_name":"Men's Shoes"}] },
  //   {"category_depth":3,
  //    "category_nodes": [{"id_or_name":"Basketball Shoes"}] },
  // ]
  // If a product belongs to 2 different categories,
  // "Shoes -> Men's shoes" and "Sports -> Basketball"
  // then
  //
  // [
  //   {"category_depth":1,
  //    "category_nodes": [{"id_or_name":"Shoes"},
  //                       {"id_or_name":"Sports"}] },
  //   {"category_depth":2,
  //    "category_nodes": [{"id_or_name":"Men's shoes"},
  //                       {"id_or_name":"Basketball"}] },
  // ]
  string categories = 6;

  // Optional.
  // The (internal) label of the product. Format into JSON serialized string.
  // Sample values are: "[\"New\", \"Summer\", \"Clearance\"]", etc.
  string tags = 7;

  // Optional.
  // The title/name of the product.
  string title = 8;

  // Optional.
  // The brand of the product.
  string brands = 9;

  // Optional.
  // The rating given by the users. Non-negative value.
  float user_rating = 10;

  // Optional.
  // The number of sales of the content if it is paid content.
  int32 sold_count = 11;

  // Optional.
  // The ID of the group/unit for products with common characteristics.
  string product_group_id = 12;

  // Optional.
  // The URL of the cover multimedia for the product. Format into JSON serialized string.
  string display_cover_multimedia_url = 13;

  // Optional.
  // The number of comments of the content.
  int32 comment_count = 14;

  // Optional.
  // The source of the product..
  // For example, "self", "thirdparty", "other".
  string source = 15;

  // Required.
  // The ID of the seller.
  string seller_id = 16;

  // Optional.
  // The tier/level of the seller.
  string seller_level = 17;

  // Optional.
  // The seller's rating given by the customers. Non-negative value.
  float seller_rating = 21;

  // Optional.
  // This is a catch-all field to pass all the additional information.
  // Please provide as much information as possible.
  map<string, string> extra = 100;
}

// The scene where the event happened.
message Scene {
  // Required.
  // The unique identifier for the scene.
  // It can be Home page, Search page, Details page, etc.
  // It is strongly recommended that you split the scene if possible.
  string scene_name = 1;

  // Optional.
  // The page number.
  // It can be:
  // 1. Users swipe the screen for X times then see the product.
  // 2. Users go to page X and see the product.
  // In this case, X is the page number.
  //
  // This should default to be 0. That means everything fits into 1 page.
  int32 page_number = 2;

  // Optional.
  // The offset (1-based) within the page above.
  int32 offset = 3;
}

// The device proto.
message Device {
  // Required.
  // The platform used by the user.
  // The acceptable values are "app", "desktop-web", "mobile-web", "other".
  // app: user use APP
  // desktop-web: user use desktop web
  // mobile-web: user use mobile web
  string platform = 1;

  // Optional.
  // The platform used by the user.
  // The acceptable values are "android", "ios", "windows", "other"
  // and "other".
  string os_type = 2;

  // Optional.
  // Your application version.
  // e.g. V9.0.8.
  string app_version = 3;

  // Optional.
  // The device model.
  // e.g. "iPhone10", "Pixel 4".
  string device_model = 4;

  // Optional.
  // The brand of the device.
  // e.g. "Samsung"
  string device_brand = 5;

  // Optional.
  // The operating system version.
  // e.g. "14.4.2"
  string os_version = 6;

  // Optional.
  // The type of the browser.
  // e.g. "chrome", "firefox", etc.
  string browser_type = 7;

  // Optional.
  // The UserAgent for the browser.
  string user_agent = 8;

  // Optional.
  // The network used.
  // The acceptable values are "2g", "3g", "4g", "5g", "wifi", "other".
  string network = 9;
}

// Summary of error messages in imported data processing
message DataError {
  // Detail error message, which should be in English.
  // Example, "An unexpected value XXX is included in the XXX field, only ["xx", "yy", "zz"] can be accepted"
  string message = 1;

  // Specific abnormal data
  string data = 2;
}

message WriteResponse {
  // Task execution result.
  // when status.code is 0, no exception occurred during execution, and all writing was successful
  Status status = 1;

  // When status.code is 1206, errors has a value.
  // Some data may fail to be processed during the writing process, and all failure information will be returned through errors.
  // If status.code is not 0, but errors has no value, it means that all data is Write failed
  repeated DataError errors = 2;
}


// general write request,supported import realtime data
message WriteDataRequest{
  // Required
  // Id of the recommendation project.
  string project_id = 1;

  // Required
  // The stage of importing data，Corresponding to the three synchronization stages of the recommendation platform
  // Possible type values:
  // "trial":Test data/pre-synchronization stage
  // "historical":Historical data synchronization stage
  // "incremental":Incremental real-time data synchronization stage
  string stage = 2;

  // Optional.
  // topic is datatype, which specify the type of data users are going to write.
  // in WriteOthers, topic should not be missing in request, In other cases, the topic can be omitted.
  // The acceptable values are "user", "goods", "behavior", and "others"
  // user: user data
  // goods: product data
  // behavior: user event data
  // others: It is temporarily set to "others", the specific value depends on your need.
  string topic = 3;

  // Required
  // Array of json strings. The array size is max to 2000.
  // Each element of the array is a json serialized string of customer data.
  repeated string data = 10;

  // Optional.
  // This is a catch-all field to pass all the additional information.
  // Please provide as much information as possible.
  map<string, string> extra = 100;
}

// The request proto for `Predict` call.
message PredictRequest {
  // Required
  // Id of the recommendation project.
  string project_id = 1;

  // Required
  // Recommended model unique identification.
  string model_id = 2;

  // Required.
  // This is same as `User.user_id`.
  string user_id = 10;

  // Required.
  // The maximum number of products returned.
  // The actual # of products returned is the min of:
  // `size`
  // length(`context.candidates_product_ids`)
  // total # of products with `is_recommendable=True`
  int32 size = 11;

  // Required.
  // The scene for the recommendation.
  Scene scene = 12;

  // The context of this request.
  message Context {
    // Optional.
    // This is only required for product details page.
    Product root_product = 1;

    // Optional.
    // Make sure this is as close to `UserEvent.device` as possible.
    Device device = 2;

    reserved 3;
    reserved "candidate_product_ids";

    // Optional
    // The list of candidates for the recommendation.
    // If this is empty, all products are the candidates.
    repeated Product candidate_products = 4;

    // Optional.
    // Online feature, Saas Premium projects maybe use.
    PredictFeature feature = 5;

    // Optional.
    // Dynamic filter, Saas Premium projects maybe use.
    PredictFilter filter = 6;
  }

  // Optional.
  // The context of this request.
  Context context = 13;

  // Optional.
  // Filter some IDs in recommendations
  repeated PredictFilterItem filter_items = 15;

  // Optional.
  // This is a catch-all field to pass all the additional information.
  // Please provide as much information as possible.
  map<string, string> extra = 100;
}

message PredictFilterItem {
  // item id
  string id = 1;

  // extra info
  map<string, string> extra = 100;
}

message PredictFeature {
  map<string, string> string_feature = 1;

  map<string, int64> int_feature = 2;

  map<string, float> float_feature = 3;

  map<string, double> double_feature = 4;

  map<string, StringArray> string_array_feature = 5;

  map<string, IntArray> int_array_feature = 6;

  map<string, FloatArray> float_array_feature = 7;

  map<string, DoubleArray> double_array_feature = 8;
}

message PredictFilter {
  map<string, string> string_filter = 1;

  map<string, int64> int_filter = 2;

  map<string, float> float_filter = 3;

  map<string, double> double_filter = 4;

  map<string, StringArray> string_array_filter = 5;

  map<string, IntArray> int_array_filter = 6;

  map<string, FloatArray> float_array_filter = 7;

  map<string, DoubleArray> double_array_filter = 8;
}

message StringArray {
  repeated string values = 1;
}

message IntArray {
  repeated int64 values = 1;
}

message FloatArray {
  repeated float values = 1;
}

message DoubleArray {
  repeated double values = 1;
}

// A single predict call result.
message PredictResult {
  // The response of a product.
  message ResponseProduct {
    // Output only.
    // The product id.
    // This is consistent with `Product.product_id`.
    string product_id = 1;

    // Output only.
    // This is the 1-based ranking of the product.
    int32 rank = 2;

    // Output only.
    // The is the predicted CTR.
    double pctr = 3;

    // Output only.
    // This is the predicted CVR.
    double pcvr = 4;

    // Output only.
    // The strategy used for this particular recommendation result.
    string rec_info = 5;

    // Output only.
    // All the extra debug info here.
    map<string, string> extra = 100;
  }

  // Output only.
  // The list of predicted products.
  repeated ResponseProduct response_products = 1;

  // Output only.
  // Extra debug info.
  map<string, string> extra = 100;
}

// The response proto the predict call.
message PredictResponse {
  // Output only.
  // The status of the call.
  Status status = 1;

  // Output only.
  // This is same as `PredictRequest.request_id`.
  string request_id = 2;

  // Output only.
  // This is only populated when `PredictResponse.status.code` is not 0.
  PredictResult value = 3;
}

// The request proto for AckServerImpressions call.
message AckServerImpressionsRequest {
  // Required
  // Id of the recommendation project.
  string project_id = 1;

  // Required
  // Recommended model unique identification.
  string model_id = 2;

  // Required.
  // This should be same as `PredictRequest.request_id`.
  string predict_request_id = 10;

  // Required.
  // This should be same as `PredictRequest.user_id`.
  string user_id = 11;

  // Required.
  // This should be the traffic source.
  // The acceptable values are ["self", "byteplus", "other"].
  // Please refer to
  // [this](../docs/ways-to-improve-recommendation-performance#use-usereventrec_info-and-usereventtraffic_source) for more details.
  string traffic_source = 12;

  // Required.
  // The scene info.
  // Please make sure this is as close to UserEvent.scene as possible.
  Scene scene = 13;

  // The product that was altered.
  message AlteredProduct {
    // Required.
    // This is same as `Product.product_id`.
    string product_id = 1;

    // Required.
    // The final state of the product.
    // The acceptable values are "kept", "filtered", "inserted", "filled".
    // kept     : The product was kept as is.
    // filtered : The product is filtered by the caller's own logic.
    // inserted : The product is inserted by the caller's own logic.
    // filled   : The product is filled by the caller's own logic.
    string altered_reason = 2;

    // Required.
    // The final rank.
    // If this is unset (or 0), we assume it is filtered in actual impression.
    int32 rank = 3;

    // Internal
    // If `product_id` is a number, `product_id_hash` equals to `product_id`
    // If `product_id` is not a number, `product_id_hash` equals to `fnv(product_id)`
    int64 product_id_hash = 100;

    // Optional.
    // This is a catch-all field to pass all the additional information.
    // Please provide as much information as possible.
    map<string, string> extra = 101;
  }

  // Required.
  // The list of altered products.
  repeated AlteredProduct altered_products = 14;

  // Optional.
  // This is a catch-all field to pass all the additional information.
  // Please provide as much information as possible.
  map<string, string> extra = 100;
}

// The response message for AckServerImpressions.
message AckServerImpressionsResponse {
  // Output only.
  // The status of this response.
  Status status = 1;
}

// The BytePlus Saas service.
service BytePlusSaasService {
  // Write
  //
  // Writes at most 2000 data at a time. Exceeding 2000 in a request results in
  // a rejection. One can use this to upload new data, or update existing
  // data (by providing all the fields, some data type not support update, e.g. user event).
  rpc WritUsers(WriteDataRequest) returns (WriteResponse);
  rpc WritProducts(WriteDataRequest) returns (WriteResponse);
  rpc WritUserEvents(WriteDataRequest) returns (WriteResponse);
  // Byteplus Recommend premium only. Upload and write additional data to Byteplus Recommend.
  rpc WriteOthers(WriteDataRequest) returns (WriteResponse);

  // Finish
  //
  // Finish a certain data transfer process. Finish at most 100 data at a time.
  // May pass a date list to mark the completion of data synchronization for these days.
  rpc Finish(FinishWriteDataRequest) returns (WriteResponse);

  // Predict
  //
  // Gets the list of products (ranked).
  // The updated user data will take effect in 24 hours.
  // The updated product data will take effect in 30 mins.
  // Depending how (realtime or batch) the UserEvents are sent back, it will
  // be fed into the models and take effect after that.
  rpc Predict(PredictRequest) returns (PredictResponse);

  // AckServerImpressions
  //
  // Sends back the actual product list shown to the users based on the
  // customized changes from `PredictResponse`.
  // example: our Predict call returns the list of items [1, 2, 3, 4].
  // Your custom logic have decided that product 3 has been sold out and
  // product 10 needs to be inserted before 2 based on some promotion rules,
  // the AckServerImpressionsRequest content items should looks like
  // [
  //   {id:1, altered_reason: "kept", rank:1},
  //   {id:10, altered_reason: "inserted", rank:2},
  //   {id:2, altered_reason: "kept", rank:3},
  //   {id:4, altered_reason: "kept", rank:4},
  //   {id:3, altered_reason: "filtered", rank:0},
  // ].
  rpc AckServerImpressions(AckServerImpressionsRequest) returns (AckServerImpressionsResponse);
}