// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: byteplus_saas_content.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The `Status` type defines a logical error model, Each `Status` message
// contains 2 pieces of data: error code, error message.
/// Chinese version.
///
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The error code. Callers should expect this field for all
	// responses.
	// Here is the table for the possible codes.
	// 0   : The request is successfully returned. Other values indicates errors.
	// xxx : The 3-digit error codes align with standard http error codes, e.g.
	//       4xx indicates user error while 5xx indicates server error.
	// 1xxx: The errors related to Import calls.
	// 2xxx: The errors related to Predict calls.
	// Please refer to [this](../docs/error-code) for more details.
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// Output only. Detailed error message.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Output only. success mark
	Success bool `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_content_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_content_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_content_proto_rawDescGZIP(), []int{0}
}

func (x *Status) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Status) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Represents a whole or partial calendar date, such as a birthday. The time of
// day and time zone are either specified elsewhere or are insignificant. The
// date is relative to the Gregorian Calendar. This can represent one of the
// following:
//
// * A full date, with non-zero year, month, and day values
// * A month and day value, with a zero year, such as an anniversary
// * A year on its own, with zero month and day values
// * A year and month value, with a zero day, such as a credit card expiration
// date
type Date struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without
	// a year.
	Year int32 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a
	// month and day.
	Month int32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
	// to specify a year by itself or a year and month where the day isn't
	// significant.
	Day int32 `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`
}

func (x *Date) Reset() {
	*x = Date{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_content_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Date) ProtoMessage() {}

func (x *Date) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_content_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Date.ProtoReflect.Descriptor instead.
func (*Date) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_content_proto_rawDescGZIP(), []int{1}
}

func (x *Date) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Date) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *Date) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

type FinishWriteDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required
	// Id of the recommendation project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required
	// The stage of importing dataï¼ŒCorresponding to the three synchronization stages of the recommendation platform
	// Possible type values:
	// "trial":Test data/pre-synchronization stage
	// "production": Historical data synchronization stage
	// "incremental_sync_streaming":Incremental real-time data synchronization stage
	Stage string `protobuf:"bytes,2,opt,name=stage,proto3" json:"stage,omitempty"`
	// Optional.
	// topic is datatype, which specify the type of data users are going to write.
	// in WriteOthers, topic should not be missing in request, In other cases, the topic can be omitted.
	// The acceptable values are "user", "goods", "behavior", and "others"
	// user: user data
	// content: content data
	// behavior: user event data
	// others: It is temporarily set to "others", the specific value depends on your need.
	Topic string `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	// Optional.
	// When finish user events, data_dates should not be missing
	DataDates []*Date `protobuf:"bytes,10,rep,name=data_dates,json=dataDates,proto3" json:"data_dates,omitempty"`
}

func (x *FinishWriteDataRequest) Reset() {
	*x = FinishWriteDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_content_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishWriteDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishWriteDataRequest) ProtoMessage() {}

func (x *FinishWriteDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_content_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishWriteDataRequest.ProtoReflect.Descriptor instead.
func (*FinishWriteDataRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_content_proto_rawDescGZIP(), []int{2}
}

func (x *FinishWriteDataRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *FinishWriteDataRequest) GetStage() string {
	if x != nil {
		return x.Stage
	}
	return ""
}

func (x *FinishWriteDataRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *FinishWriteDataRequest) GetDataDates() []*Date {
	if x != nil {
		return x.DataDates
	}
	return nil
}

// Summary of error messages in imported data processing
type DataError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Detail error message, which should be in English.
	// Example, "An unexpected value XXX is included in the XXX field, only ["xx", "yy", "zz"] can be accepted"
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Specific abnormal data
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DataError) Reset() {
	*x = DataError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_content_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataError) ProtoMessage() {}

func (x *DataError) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_content_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataError.ProtoReflect.Descriptor instead.
func (*DataError) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_content_proto_rawDescGZIP(), []int{3}
}

func (x *DataError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DataError) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type WriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Task execution result.
	// when status.code is 0, no exception occurred during execution, and all writing was successful
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// When status.code is 1206, errors has a value.
	// Some data may fail to be processed during the writing process, and all failure information will be returned through errors.
	// If status.code is not 0, but errors has no value, it means that all data is Write failed
	Errors []*DataError `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *WriteResponse) Reset() {
	*x = WriteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_content_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteResponse) ProtoMessage() {}

func (x *WriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_content_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteResponse.ProtoReflect.Descriptor instead.
func (*WriteResponse) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_content_proto_rawDescGZIP(), []int{4}
}

func (x *WriteResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *WriteResponse) GetErrors() []*DataError {
	if x != nil {
		return x.Errors
	}
	return nil
}

// general write request,supported import realtime data
type WriteDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required
	// Id of the recommendation project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required
	// The stage of importing dataï¼ŒCorresponding to the three synchronization stages of the recommendation platform
	// Possible type values:
	// "trial":Test data/pre-synchronization stage
	// "production": Historical data synchronization stage
	// "incremental_sync_streaming":Incremental real-time data synchronization stage
	Stage string `protobuf:"bytes,2,opt,name=stage,proto3" json:"stage,omitempty"`
	// Optional.
	// topic is datatype, which specify the type of data users are going to write.
	// in WriteOthers, topic should not be missing in request, In other cases, the topic can be omitted.
	// The acceptable values are "user", "content", "behavior", and "others"
	// user: user data
	// content: content data
	// behavior: user event data
	// others: It is temporarily set to "others", the specific value depends on your need.
	Topic string `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	// Required
	// Array of json strings. The array size is max to 2000.
	// Each element of the array is a json serialized string of customer data.
	Data []string `protobuf:"bytes,10,rep,name=data,proto3" json:"data,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WriteDataRequest) Reset() {
	*x = WriteDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_content_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteDataRequest) ProtoMessage() {}

func (x *WriteDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_content_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteDataRequest.ProtoReflect.Descriptor instead.
func (*WriteDataRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_content_proto_rawDescGZIP(), []int{5}
}

func (x *WriteDataRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *WriteDataRequest) GetStage() string {
	if x != nil {
		return x.Stage
	}
	return ""
}

func (x *WriteDataRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *WriteDataRequest) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *WriteDataRequest) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// The content proto.
type Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// '''
	// Required.
	// The unique identifier for the content, can be series_id/entity_id/video_id/other unique identifier.
	// Sample values are "12345678", "146582662088489399", etc.
	// '''
	ContentId string `protobuf:"bytes,1,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	// '''
	// Required.
	// 1 if the content is recommendable (i.e. we can return this content in the recommendation result).
	// 0 if the content isn't recommendable.
	// Note:
	//  * Even if a content isn't recommendable, please still send this to us.
	//    This is because that users might interact with such contents historically,
	//    therefore it provides reasonably strong signals.
	// '''
	IsRecommendable int32 `protobuf:"varint,2,opt,name=is_recommendable,json=isRecommendable,proto3" json:"is_recommendable,omitempty"`
	// '''
	// Required.
	// Json Array, should serializer to string
	// The categories this content belongs to.
	// For example in origin json object, if a content has "Movie -> Comedy"
	// This should be:
	// [
	//   {"category_depth":1,
	//    "category_nodes": [{"id_or_name":"Movie"}] },
	//   {"category_depth":2,
	//    "category_nodes": [{"id_or_name":"Comedy"}] }
	// ]
	// If a content belongs to 2 different categories,
	// "Movie -> Comedy" and "Movie -> Action"
	// then
	// [
	//   {"category_depth":1,
	//    "category_nodes": [{"id_or_name":"Movie"}] },
	//   {"category_depth":2,
	//    "category_nodes": [{"id_or_name":"Comedy"},
	//                       {"id_or_name":"Action"}] }
	// ]
	// then you should serialize the json object to string, for example in python:
	// categories = json.dumps( [
	//     {"category_depth":1,
	//      "category_nodes": [{"id_or_name":"Movie"}] },
	//     {"category_depth":2,
	//      "category_nodes": [{"id_or_name":"Comedy"}] }
	//   ])
	// '''
	Categories string `protobuf:"bytes,3,opt,name=categories,proto3" json:"categories,omitempty"`
	// '''
	// Required.
	// Type of the content.
	// The accepted values are "picture", "gif", "video", "text", "other".
	// Note:
	//  * if the content_type is video, video_duration must be non-zero.
	// '''
	ContentType string `protobuf:"bytes,4,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// '''
	// Based content_type.
	// If content_type is video, this field is required.
	// Provide the length this video, in milliseconds.
	// Sample values are 1200000, etc.
	// '''
	VideoDuration int32 `protobuf:"varint,5,opt,name=video_duration,json=videoDuration,proto3" json:"video_duration,omitempty"`
	// '''
	// Optional.
	// The content title.
	// Sample values are "Video #1", "Titanic clip", etc.
	// '''
	ContentTitle string `protobuf:"bytes,6,opt,name=content_title,json=contentTitle,proto3" json:"content_title,omitempty"`
	// '''
	// Optional.
	// The content description.
	// '''
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	// '''
	// Optional.
	// The account who created the content (i.e. the user_id) or the publisher of a video.
	// Sample values are "1234567", "359938082141597", "665DEA957EBFB34D41B1F1D80E4B5F89" etc.
	// '''
	ContentOwner string `protobuf:"bytes,8,opt,name=content_owner,json=contentOwner,proto3" json:"content_owner,omitempty"`
	// '''
	// Optional.
	// The number of followers of the content owner.
	// Sample values are 0, 1000, 1000000, etc.
	// '''
	ContentOwnerFollowers int32 `protobuf:"varint,9,opt,name=content_owner_followers,json=contentOwnerFollowers,proto3" json:"content_owner_followers,omitempty"`
	// '''
	// Optional.
	// The rating, if any, of this content owner.
	// Sample values are 3.5, 98.0 etc.
	// '''
	ContentOwnerRating float32 `protobuf:"fixed32,10,opt,name=content_owner_rating,json=contentOwnerRating,proto3" json:"content_owner_rating,omitempty"`
	// '''
	// Optional.
	// The name of this content owner.
	// Sample values are "testuser#1", etc.
	// '''
	ContentOwnerName string `protobuf:"bytes,11,opt,name=content_owner_name,json=contentOwnerName,proto3" json:"content_owner_name,omitempty"`
	// '''
	// Optional.
	// If this content belongs to any collection, put the collection id here.
	// Sample values are "1234" etc.
	// '''
	CollectionId string `protobuf:"bytes,12,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// '''
	// Optional.
	// Json Array, should serializer to string.
	// Internal label of this content.
	// Sample values are "[\"New\", \"Trending\"]", etc.
	// '''
	Tags string `protobuf:"bytes,13,opt,name=tags,proto3" json:"tags,omitempty"`
	// '''
	// Optional.
	// Json Array, should serializer to string.
	// If this content belongs to a topic, put the tags of the topic here.
	// Sample values are "[\"Political\", \"Latest\"]", etc.
	// '''
	TopicTags string `protobuf:"bytes,14,opt,name=topic_tags,json=topicTags,proto3" json:"topic_tags,omitempty"`
	// '''
	// Optional.
	// Json Array, should serializer to string.
	// Provide the url to the image file here.
	// Sample values are "[\"https://images-na.ssl-images-amazon.com/images/I/81WmojBxvbL._AC_UL1500_.jpg\"]", etc.
	// '''
	ImageUrls string `protobuf:"bytes,15,opt,name=image_urls,json=imageUrls,proto3" json:"image_urls,omitempty"`
	// '''
	// Optional.
	// The number of images that are displayed on the detail page.
	// Sample values are 1, 5, etc.
	// '''
	DetailPicNum int32 `protobuf:"varint,16,opt,name=detail_pic_num,json=detailPicNum,proto3" json:"detail_pic_num,omitempty"`
	// '''
	// Optional.
	// Json Array, should serializer to string.
	// Provide the url to the video file here.
	// Sample values are "[\"https://test_video.mov\"]", etc.
	// '''
	VideoUrls string `protobuf:"bytes,17,opt,name=video_urls,json=videoUrls,proto3" json:"video_urls,omitempty"`
	// '''
	// Optional.
	// The rating given by the users.
	// The value is normalized to [0.0, 5.0].
	// The accepted value range is [0.0, 5.0].
	// '''
	UserRating float32 `protobuf:"fixed32,18,opt,name=user_rating,json=userRating,proto3" json:"user_rating,omitempty"`
	// '''
	// Optional.
	// The number of views for this content.
	// Sample values are 10000, etc.
	// '''
	ViewsCount int32 `protobuf:"varint,19,opt,name=views_count,json=viewsCount,proto3" json:"views_count,omitempty"`
	// '''
	// Optional.
	// The number of comments for this content.
	// Sample values are 100, etc.
	// '''
	CommentsCount int32 `protobuf:"varint,20,opt,name=comments_count,json=commentsCount,proto3" json:"comments_count,omitempty"`
	// '''
	// Optional.
	// The number of likes for this content.
	// Sample values are 10, etc.
	// '''
	LikesCount int32 `protobuf:"varint,21,opt,name=likes_count,json=likesCount,proto3" json:"likes_count,omitempty"`
	// '''
	// Optional.
	// The number of shares for this content.
	// Sample values are 50, etc.
	// '''
	SharesCount int32 `protobuf:"varint,22,opt,name=shares_count,json=sharesCount,proto3" json:"shares_count,omitempty"`
	// '''
	// Optional.
	// The number of saves for this content.
	// Sample values are 50, etc.
	// '''
	SaveCount int32 `protobuf:"varint,23,opt,name=save_count,json=saveCount,proto3" json:"save_count,omitempty"`
	// '''
	// Required.
	// If this is paid_content, send the current price (after discount) in cents.
	// e.g. $100.12 should be 10012 here.
	// '''
	CurrentPrice int32 `protobuf:"varint,24,opt,name=current_price,json=currentPrice,proto3" json:"current_price,omitempty"`
	// '''
	// Optional.
	// If this is paid_content, send the original price (before discount) in cents
	// e.g. $100.12 should be 10012 here.
	// '''
	OriginalPrice int32 `protobuf:"varint,25,opt,name=original_price,json=originalPrice,proto3" json:"original_price,omitempty"`
	// '''
	// Optional.
	// Json Array, should serializer to string.
	// The location tags of this content.
	// Sample values are "[\"Cafe 101\"]", etc.
	// '''
	AvailableLocation string `protobuf:"bytes,26,opt,name=available_location,json=availableLocation,proto3" json:"available_location,omitempty"`
	// '''
	// Optional.
	// The timestamp that the content is published.
	// Sample values are 1623193487, etc.
	// '''
	PublishTimestamp int32 `protobuf:"varint,27,opt,name=publish_timestamp,json=publishTimestamp,proto3" json:"publish_timestamp,omitempty"`
	// '''
	// Optional.
	// The timestamp that the content is updated.
	// Sample values are 1623193487, etc.
	// '''
	UpdateTimestamp int32 `protobuf:"varint,28,opt,name=update_timestamp,json=updateTimestamp,proto3" json:"update_timestamp,omitempty"`
	// '''
	// Optional.
	// The timestamp when this content can be shown to users.
	// Sample values are 1623193487, etc.
	// '''
	CopyrightStartTimestamp int32 `protobuf:"varint,29,opt,name=copyright_start_timestamp,json=copyrightStartTimestamp,proto3" json:"copyright_start_timestamp,omitempty"`
	// '''
	// Optional.
	// The timestamp when this content stop being available to users.
	// Sample values are 1623193487, etc.
	// '''
	CopyrightEndTimestamp int32 `protobuf:"varint,30,opt,name=copyright_end_timestamp,json=copyrightEndTimestamp,proto3" json:"copyright_end_timestamp,omitempty"`
	// '''
	// Optional.
	// Whether this content requires payment/subscription to view.
	// '''
	IsPaidContent bool `protobuf:"varint,31,opt,name=is_paid_content,json=isPaidContent,proto3" json:"is_paid_content,omitempty"`
	// '''
	// Optional.
	// The languages used in this content.
	// Sample values are "English", "Chinese", etc.
	// '''
	Language string `protobuf:"bytes,32,opt,name=language,proto3" json:"language,omitempty"`
	// '''
	// Optional.
	// Json Array, should serializer to string.
	// If your platform currently provides "Related Content" recommendation, send the list of related content ids here.
	// Sample values are "[\"12345678\",\"12345679\"]", etc.
	// '''
	RelatedContentIds string `protobuf:"bytes,33,opt,name=related_content_ids,json=relatedContentIds,proto3" json:"related_content_ids,omitempty"`
	// '''
	// Optional.
	// If this content requires payment, provide the number of purchases.
	// Sample values are 100, etc.
	// '''
	SoldCount int32 `protobuf:"varint,34,opt,name=sold_count,json=soldCount,proto3" json:"sold_count,omitempty"`
	// '''
	// Optional.
	// The source of the content.
	// The accepted values are ["self", "thirdparty", "other"].
	// '''
	Source string `protobuf:"bytes,35,opt,name=source,proto3" json:"source,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Content) Reset() {
	*x = Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_content_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_content_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_content_proto_rawDescGZIP(), []int{6}
}

func (x *Content) GetContentId() string {
	if x != nil {
		return x.ContentId
	}
	return ""
}

func (x *Content) GetIsRecommendable() int32 {
	if x != nil {
		return x.IsRecommendable
	}
	return 0
}

func (x *Content) GetCategories() string {
	if x != nil {
		return x.Categories
	}
	return ""
}

func (x *Content) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *Content) GetVideoDuration() int32 {
	if x != nil {
		return x.VideoDuration
	}
	return 0
}

func (x *Content) GetContentTitle() string {
	if x != nil {
		return x.ContentTitle
	}
	return ""
}

func (x *Content) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Content) GetContentOwner() string {
	if x != nil {
		return x.ContentOwner
	}
	return ""
}

func (x *Content) GetContentOwnerFollowers() int32 {
	if x != nil {
		return x.ContentOwnerFollowers
	}
	return 0
}

func (x *Content) GetContentOwnerRating() float32 {
	if x != nil {
		return x.ContentOwnerRating
	}
	return 0
}

func (x *Content) GetContentOwnerName() string {
	if x != nil {
		return x.ContentOwnerName
	}
	return ""
}

func (x *Content) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *Content) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *Content) GetTopicTags() string {
	if x != nil {
		return x.TopicTags
	}
	return ""
}

func (x *Content) GetImageUrls() string {
	if x != nil {
		return x.ImageUrls
	}
	return ""
}

func (x *Content) GetDetailPicNum() int32 {
	if x != nil {
		return x.DetailPicNum
	}
	return 0
}

func (x *Content) GetVideoUrls() string {
	if x != nil {
		return x.VideoUrls
	}
	return ""
}

func (x *Content) GetUserRating() float32 {
	if x != nil {
		return x.UserRating
	}
	return 0
}

func (x *Content) GetViewsCount() int32 {
	if x != nil {
		return x.ViewsCount
	}
	return 0
}

func (x *Content) GetCommentsCount() int32 {
	if x != nil {
		return x.CommentsCount
	}
	return 0
}

func (x *Content) GetLikesCount() int32 {
	if x != nil {
		return x.LikesCount
	}
	return 0
}

func (x *Content) GetSharesCount() int32 {
	if x != nil {
		return x.SharesCount
	}
	return 0
}

func (x *Content) GetSaveCount() int32 {
	if x != nil {
		return x.SaveCount
	}
	return 0
}

func (x *Content) GetCurrentPrice() int32 {
	if x != nil {
		return x.CurrentPrice
	}
	return 0
}

func (x *Content) GetOriginalPrice() int32 {
	if x != nil {
		return x.OriginalPrice
	}
	return 0
}

func (x *Content) GetAvailableLocation() string {
	if x != nil {
		return x.AvailableLocation
	}
	return ""
}

func (x *Content) GetPublishTimestamp() int32 {
	if x != nil {
		return x.PublishTimestamp
	}
	return 0
}

func (x *Content) GetUpdateTimestamp() int32 {
	if x != nil {
		return x.UpdateTimestamp
	}
	return 0
}

func (x *Content) GetCopyrightStartTimestamp() int32 {
	if x != nil {
		return x.CopyrightStartTimestamp
	}
	return 0
}

func (x *Content) GetCopyrightEndTimestamp() int32 {
	if x != nil {
		return x.CopyrightEndTimestamp
	}
	return 0
}

func (x *Content) GetIsPaidContent() bool {
	if x != nil {
		return x.IsPaidContent
	}
	return false
}

func (x *Content) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Content) GetRelatedContentIds() string {
	if x != nil {
		return x.RelatedContentIds
	}
	return ""
}

func (x *Content) GetSoldCount() int32 {
	if x != nil {
		return x.SoldCount
	}
	return 0
}

func (x *Content) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Content) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// The scene where the event happened.
type Scene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The unique identifier for the scene.
	// It can be Home page, Search page, Details page, etc.
	// It is strongly recommended that you split the scene if possible.
	SceneName string `protobuf:"bytes,1,opt,name=scene_name,json=sceneName,proto3" json:"scene_name,omitempty"`
	// Optional.
	// The page number.
	// It can be:
	// 1. Users swipe the screen for X times then see the content.
	// 2. Users go to page X and see the content.
	// In this case, X is the page number.
	//
	// This should default to be 0. That means everything fits into 1 page.
	PageNumber int32 `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	// Optional.
	// The offset (1-based) within the page above.
	Offset int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *Scene) Reset() {
	*x = Scene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_content_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scene) ProtoMessage() {}

func (x *Scene) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_content_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scene.ProtoReflect.Descriptor instead.
func (*Scene) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_content_proto_rawDescGZIP(), []int{7}
}

func (x *Scene) GetSceneName() string {
	if x != nil {
		return x.SceneName
	}
	return ""
}

func (x *Scene) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *Scene) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// The device proto.
type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The platform used by the user.
	// The acceptable values are "app", "desktop-web", "mobile-web", "other".
	// app: user use APP
	// desktop-web: user use desktop web
	// mobile-web: user use mobile web
	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	// Optional.
	// The platform used by the user.
	// The acceptable values are "android", "ios", "windows", "other"
	// and "other".
	OsType string `protobuf:"bytes,2,opt,name=os_type,json=osType,proto3" json:"os_type,omitempty"`
	// Optional.
	// Your application version.
	// e.g. V9.0.8.
	AppVersion string `protobuf:"bytes,3,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	// Optional.
	// The device model.
	// e.g. "iPhone10", "Pixel 4".
	DeviceModel string `protobuf:"bytes,4,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"`
	// Optional.
	// The brand of the device.
	// e.g. "Samsung"
	DeviceBrand string `protobuf:"bytes,5,opt,name=device_brand,json=deviceBrand,proto3" json:"device_brand,omitempty"`
	// Optional.
	// The operating system version.
	// e.g. "14.4.2"
	OsVersion string `protobuf:"bytes,6,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	// Optional.
	// The type of the browser.
	// e.g. "chrome", "firefox", etc.
	BrowserType string `protobuf:"bytes,7,opt,name=browser_type,json=browserType,proto3" json:"browser_type,omitempty"`
	// Optional.
	// The UserAgent for the browser.
	UserAgent string `protobuf:"bytes,8,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	// Optional.
	// The network used.
	// The acceptable values are "2g", "3g", "4g", "5g", "wifi", "other".
	Network string `protobuf:"bytes,9,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_content_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_content_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_content_proto_rawDescGZIP(), []int{8}
}

func (x *Device) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *Device) GetOsType() string {
	if x != nil {
		return x.OsType
	}
	return ""
}

func (x *Device) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *Device) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *Device) GetDeviceBrand() string {
	if x != nil {
		return x.DeviceBrand
	}
	return ""
}

func (x *Device) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *Device) GetBrowserType() string {
	if x != nil {
		return x.BrowserType
	}
	return ""
}

func (x *Device) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *Device) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

// The request proto for `Predict` call.
type PredictRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required
	// Id of the recommendation project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required
	// Recommended model unique identification.
	ModelId string `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// Required.
	// This is same as `User.user_id`.
	UserId string `protobuf:"bytes,10,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Required.
	// The maximum number of contents returned.
	// The actual # of contents returned is the min of:
	// `size`
	// length(`context.candidates_content_ids`)
	// total # of contents with `is_recommendable=True`
	Size int32 `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`
	// Required.
	// The scene for the recommendation.
	Scene *Scene `protobuf:"bytes,12,opt,name=scene,proto3" json:"scene,omitempty"`
	// Optional.
	// The context of this request.
	ContentContext *PredictRequest_Context `protobuf:"bytes,14,opt,name=content_context,json=contentContext,proto3" json:"content_context,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PredictRequest) Reset() {
	*x = PredictRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_content_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictRequest) ProtoMessage() {}

func (x *PredictRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_content_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictRequest.ProtoReflect.Descriptor instead.
func (*PredictRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_content_proto_rawDescGZIP(), []int{9}
}

func (x *PredictRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PredictRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *PredictRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PredictRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PredictRequest) GetScene() *Scene {
	if x != nil {
		return x.Scene
	}
	return nil
}

func (x *PredictRequest) GetContentContext() *PredictRequest_Context {
	if x != nil {
		return x.ContentContext
	}
	return nil
}

func (x *PredictRequest) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// A single predict call result.
type PredictResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The list of predicted content.
	ResponseContents []*PredictResult_ResponseContent `protobuf:"bytes,1,rep,name=response_contents,json=responseContents,proto3" json:"response_contents,omitempty"`
	// Output only.
	// Extra debug info.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PredictResult) Reset() {
	*x = PredictResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_content_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictResult) ProtoMessage() {}

func (x *PredictResult) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_content_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictResult.ProtoReflect.Descriptor instead.
func (*PredictResult) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_content_proto_rawDescGZIP(), []int{10}
}

func (x *PredictResult) GetResponseContents() []*PredictResult_ResponseContent {
	if x != nil {
		return x.ResponseContents
	}
	return nil
}

func (x *PredictResult) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// The response proto the predict call.
type PredictResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The status of the call.
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Output only.
	// This is same as `PredictRequest.request_id`.
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Output only.
	// This is only populated when `PredictResponse.status.code` is not 0.
	ContentValue *PredictResult `protobuf:"bytes,4,opt,name=content_value,json=contentValue,proto3" json:"content_value,omitempty"`
}

func (x *PredictResponse) Reset() {
	*x = PredictResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_content_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictResponse) ProtoMessage() {}

func (x *PredictResponse) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_content_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictResponse.ProtoReflect.Descriptor instead.
func (*PredictResponse) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_content_proto_rawDescGZIP(), []int{11}
}

func (x *PredictResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PredictResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *PredictResponse) GetContentValue() *PredictResult {
	if x != nil {
		return x.ContentValue
	}
	return nil
}

// The request proto for AckServerImpressions call.
type AckServerImpressionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required
	// Id of the recommendation project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required
	// Recommended model unique identification.
	ModelId string `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// Required.
	// This should be same as `PredictRequest.request_id`.
	PredictRequestId string `protobuf:"bytes,10,opt,name=predict_request_id,json=predictRequestId,proto3" json:"predict_request_id,omitempty"`
	// Required.
	// This should be same as `PredictRequest.user_id`.
	UserId string `protobuf:"bytes,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Required.
	// This should be the traffic source.
	// The acceptable values are ["self", "byteplus", "other"].
	// Please refer to
	// [this](../docs/ways-to-improve-recommendation-performance#use-usereventrec_info-and-usereventtraffic_source) for more details.
	TrafficSource string `protobuf:"bytes,12,opt,name=traffic_source,json=trafficSource,proto3" json:"traffic_source,omitempty"`
	// Required.
	// The scene info.
	// Please make sure this is as close to UserEvent.scene as possible.
	Scene *Scene `protobuf:"bytes,13,opt,name=scene,proto3" json:"scene,omitempty"`
	// Required.
	// The list of altered contents.
	AlteredContents []*AckServerImpressionsRequest_AlteredContent `protobuf:"bytes,15,rep,name=altered_contents,json=alteredContents,proto3" json:"altered_contents,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AckServerImpressionsRequest) Reset() {
	*x = AckServerImpressionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_content_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckServerImpressionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckServerImpressionsRequest) ProtoMessage() {}

func (x *AckServerImpressionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_content_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckServerImpressionsRequest.ProtoReflect.Descriptor instead.
func (*AckServerImpressionsRequest) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_content_proto_rawDescGZIP(), []int{12}
}

func (x *AckServerImpressionsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AckServerImpressionsRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *AckServerImpressionsRequest) GetPredictRequestId() string {
	if x != nil {
		return x.PredictRequestId
	}
	return ""
}

func (x *AckServerImpressionsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AckServerImpressionsRequest) GetTrafficSource() string {
	if x != nil {
		return x.TrafficSource
	}
	return ""
}

func (x *AckServerImpressionsRequest) GetScene() *Scene {
	if x != nil {
		return x.Scene
	}
	return nil
}

func (x *AckServerImpressionsRequest) GetAlteredContents() []*AckServerImpressionsRequest_AlteredContent {
	if x != nil {
		return x.AlteredContents
	}
	return nil
}

func (x *AckServerImpressionsRequest) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// The response message for AckServerImpressions.
type AckServerImpressionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The status of this response.
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AckServerImpressionsResponse) Reset() {
	*x = AckServerImpressionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_content_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckServerImpressionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckServerImpressionsResponse) ProtoMessage() {}

func (x *AckServerImpressionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_content_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckServerImpressionsResponse.ProtoReflect.Descriptor instead.
func (*AckServerImpressionsResponse) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_content_proto_rawDescGZIP(), []int{13}
}

func (x *AckServerImpressionsResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// The context of this request.
type PredictRequest_Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional
	// This is only required for content details page.
	RootContent *Content `protobuf:"bytes,1,opt,name=root_content,json=rootContent,proto3" json:"root_content,omitempty"`
	// Optional.
	// Make sure this is as close to `UserEvent.device` as possible.
	Device *Device `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	// Optional
	// The list of candidates for the recommendation.
	// If this is empty, all content are the candidates.
	CandidateContents []*Content `protobuf:"bytes,3,rep,name=candidate_contents,json=candidateContents,proto3" json:"candidate_contents,omitempty"`
}

func (x *PredictRequest_Context) Reset() {
	*x = PredictRequest_Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_content_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictRequest_Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictRequest_Context) ProtoMessage() {}

func (x *PredictRequest_Context) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_content_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictRequest_Context.ProtoReflect.Descriptor instead.
func (*PredictRequest_Context) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_content_proto_rawDescGZIP(), []int{9, 0}
}

func (x *PredictRequest_Context) GetRootContent() *Content {
	if x != nil {
		return x.RootContent
	}
	return nil
}

func (x *PredictRequest_Context) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *PredictRequest_Context) GetCandidateContents() []*Content {
	if x != nil {
		return x.CandidateContents
	}
	return nil
}

// The response of a content.
type PredictResult_ResponseContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only.
	// The content id.
	// This is consistent with `Content.content_id`.
	ContentId string `protobuf:"bytes,1,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	// Output only.
	// This is the 1-based ranking of the content.
	Rank int32 `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	// Output only.
	// The is the predicted CTR.
	Pctr float64 `protobuf:"fixed64,3,opt,name=pctr,proto3" json:"pctr,omitempty"`
	// Output only.
	// This is the predicted CVR.
	Pcvr float64 `protobuf:"fixed64,4,opt,name=pcvr,proto3" json:"pcvr,omitempty"`
	// Output only.
	// The strategy used for this particular recommendation result.
	// Please refer to [this](../docs/ways-to-improve-recommendation-performance#use-usereventrec_info-and-usereventtraffic_source) for more details.
	RecInfo string `protobuf:"bytes,5,opt,name=rec_info,json=recInfo,proto3" json:"rec_info,omitempty"`
	// Output only.
	// All the extra debug info here.
	Extra map[string]string `protobuf:"bytes,100,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PredictResult_ResponseContent) Reset() {
	*x = PredictResult_ResponseContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_content_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictResult_ResponseContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictResult_ResponseContent) ProtoMessage() {}

func (x *PredictResult_ResponseContent) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_content_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictResult_ResponseContent.ProtoReflect.Descriptor instead.
func (*PredictResult_ResponseContent) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_content_proto_rawDescGZIP(), []int{10, 0}
}

func (x *PredictResult_ResponseContent) GetContentId() string {
	if x != nil {
		return x.ContentId
	}
	return ""
}

func (x *PredictResult_ResponseContent) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *PredictResult_ResponseContent) GetPctr() float64 {
	if x != nil {
		return x.Pctr
	}
	return 0
}

func (x *PredictResult_ResponseContent) GetPcvr() float64 {
	if x != nil {
		return x.Pcvr
	}
	return 0
}

func (x *PredictResult_ResponseContent) GetRecInfo() string {
	if x != nil {
		return x.RecInfo
	}
	return ""
}

func (x *PredictResult_ResponseContent) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// The content that was altered.
type AckServerImpressionsRequest_AlteredContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// This is same as `Content.content_id`.
	ContentId string `protobuf:"bytes,1,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	// Required.
	// The final state of the content.
	// The acceptable values are "kept", "filtered", "inserted".
	// kept     : The content was kept as is.
	// filtered : The content is filtered by the caller's own logic.
	// inserted : The content is inserted by the caller's own logic.
	AlteredReason string `protobuf:"bytes,2,opt,name=altered_reason,json=alteredReason,proto3" json:"altered_reason,omitempty"`
	// Required.
	// The final rank.
	// If this is unset (or 0), we assume it is filtered in actual impression.
	Rank int32 `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	// Internal
	// If `content_id` is a number, `content_id_hash` equals to `content_id`
	// If `content_id` is not a number, `content_id_hash` equals to `fnv(content_id)`
	ContentIdHash int64 `protobuf:"varint,100,opt,name=content_id_hash,json=contentIdHash,proto3" json:"content_id_hash,omitempty"`
	// Optional.
	// This is a catch-all field to pass all the additional information.
	// Please provide as much information as possible.
	Extra map[string]string `protobuf:"bytes,101,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AckServerImpressionsRequest_AlteredContent) Reset() {
	*x = AckServerImpressionsRequest_AlteredContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_byteplus_saas_content_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckServerImpressionsRequest_AlteredContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckServerImpressionsRequest_AlteredContent) ProtoMessage() {}

func (x *AckServerImpressionsRequest_AlteredContent) ProtoReflect() protoreflect.Message {
	mi := &file_byteplus_saas_content_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckServerImpressionsRequest_AlteredContent.ProtoReflect.Descriptor instead.
func (*AckServerImpressionsRequest_AlteredContent) Descriptor() ([]byte, []int) {
	return file_byteplus_saas_content_proto_rawDescGZIP(), []int{12, 0}
}

func (x *AckServerImpressionsRequest_AlteredContent) GetContentId() string {
	if x != nil {
		return x.ContentId
	}
	return ""
}

func (x *AckServerImpressionsRequest_AlteredContent) GetAlteredReason() string {
	if x != nil {
		return x.AlteredReason
	}
	return ""
}

func (x *AckServerImpressionsRequest_AlteredContent) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *AckServerImpressionsRequest_AlteredContent) GetContentIdHash() int64 {
	if x != nil {
		return x.ContentIdHash
	}
	return 0
}

func (x *AckServerImpressionsRequest_AlteredContent) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

var File_byteplus_saas_content_proto protoreflect.FileDescriptor

var file_byteplus_saas_content_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x73, 0x61, 0x61, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x62,
	0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75,
	0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x50, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x42, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x64, 0x61, 0x79, 0x22, 0xa8, 0x01, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x43, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c,
	0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x44, 0x61, 0x74, 0x65, 0x73, 0x22, 0x39,
	0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x92, 0x01, 0x0a, 0x0d, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73,
	0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73,
	0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xfe,
	0x01, 0x0a, 0x10, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x51, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xbf, 0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x69, 0x63, 0x4e, 0x75, 0x6d,
	0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6b, 0x65,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c,
	0x69, 0x6b, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x61, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x73, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3a,
	0x0a, 0x19, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x17, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63, 0x6f, 0x70,
	0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x50,
	0x61, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x6c, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x48, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75,
	0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x5f, 0x0a, 0x05, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x22, 0x9f, 0x02, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x22, 0x90, 0x05, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x3b,
	0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c,
	0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x5f, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4f, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73,
	0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0xed, 0x01,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9, 0x04, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x6a, 0x0a, 0x11, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0xa1, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x63, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x70, 0x63, 0x74, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x63, 0x76, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x70, 0x63, 0x76, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x5e, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70,
	0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xc4, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c,
	0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xcd, 0x06, 0x0a, 0x1b, 0x41,
	0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12,
	0x75, 0x0a, 0x10, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72,
	0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0xb9, 0x02, 0x0a, 0x0e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x6b, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65,
	0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5e, 0x0a, 0x1c, 0x41, 0x63,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e,
	0x72, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0xc8, 0x06, 0x0a, 0x13, 0x42,
	0x79, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x53, 0x61, 0x61, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x6c, 0x0a, 0x09, 0x57, 0x72, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x30, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6f, 0x0a, 0x0c, 0x57, 0x72, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x30, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x71, 0x0a, 0x0e, 0x57, 0x72, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x0b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x73, 0x12, 0x30, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x36,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70,
	0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x12, 0x2e, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x91, 0x01, 0x0a, 0x14, 0x41, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e,
	0x72, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x65, 0x0a, 0x25, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5a, 0x3c,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x79, 0x74, 0x65, 0x70,
	0x6c, 0x75, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x62, 0x79, 0x74, 0x65, 0x70, 0x6c, 0x75, 0x73,
	0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2d, 0x72, 0x65, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_byteplus_saas_content_proto_rawDescOnce sync.Once
	file_byteplus_saas_content_proto_rawDescData = file_byteplus_saas_content_proto_rawDesc
)

func file_byteplus_saas_content_proto_rawDescGZIP() []byte {
	file_byteplus_saas_content_proto_rawDescOnce.Do(func() {
		file_byteplus_saas_content_proto_rawDescData = protoimpl.X.CompressGZIP(file_byteplus_saas_content_proto_rawDescData)
	})
	return file_byteplus_saas_content_proto_rawDescData
}

var file_byteplus_saas_content_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_byteplus_saas_content_proto_goTypes = []interface{}{
	(*Status)(nil),                        // 0: bytedance.byteplus.rec.content.Status
	(*Date)(nil),                          // 1: bytedance.byteplus.rec.content.Date
	(*FinishWriteDataRequest)(nil),        // 2: bytedance.byteplus.rec.content.FinishWriteDataRequest
	(*DataError)(nil),                     // 3: bytedance.byteplus.rec.content.DataError
	(*WriteResponse)(nil),                 // 4: bytedance.byteplus.rec.content.WriteResponse
	(*WriteDataRequest)(nil),              // 5: bytedance.byteplus.rec.content.WriteDataRequest
	(*Content)(nil),                       // 6: bytedance.byteplus.rec.content.Content
	(*Scene)(nil),                         // 7: bytedance.byteplus.rec.content.Scene
	(*Device)(nil),                        // 8: bytedance.byteplus.rec.content.Device
	(*PredictRequest)(nil),                // 9: bytedance.byteplus.rec.content.PredictRequest
	(*PredictResult)(nil),                 // 10: bytedance.byteplus.rec.content.PredictResult
	(*PredictResponse)(nil),               // 11: bytedance.byteplus.rec.content.PredictResponse
	(*AckServerImpressionsRequest)(nil),   // 12: bytedance.byteplus.rec.content.AckServerImpressionsRequest
	(*AckServerImpressionsResponse)(nil),  // 13: bytedance.byteplus.rec.content.AckServerImpressionsResponse
	nil,                                   // 14: bytedance.byteplus.rec.content.WriteDataRequest.ExtraEntry
	nil,                                   // 15: bytedance.byteplus.rec.content.Content.ExtraEntry
	(*PredictRequest_Context)(nil),        // 16: bytedance.byteplus.rec.content.PredictRequest.Context
	nil,                                   // 17: bytedance.byteplus.rec.content.PredictRequest.ExtraEntry
	(*PredictResult_ResponseContent)(nil), // 18: bytedance.byteplus.rec.content.PredictResult.ResponseContent
	nil,                                   // 19: bytedance.byteplus.rec.content.PredictResult.ExtraEntry
	nil,                                   // 20: bytedance.byteplus.rec.content.PredictResult.ResponseContent.ExtraEntry
	(*AckServerImpressionsRequest_AlteredContent)(nil), // 21: bytedance.byteplus.rec.content.AckServerImpressionsRequest.AlteredContent
	nil, // 22: bytedance.byteplus.rec.content.AckServerImpressionsRequest.ExtraEntry
	nil, // 23: bytedance.byteplus.rec.content.AckServerImpressionsRequest.AlteredContent.ExtraEntry
}
var file_byteplus_saas_content_proto_depIdxs = []int32{
	1,  // 0: bytedance.byteplus.rec.content.FinishWriteDataRequest.data_dates:type_name -> bytedance.byteplus.rec.content.Date
	0,  // 1: bytedance.byteplus.rec.content.WriteResponse.status:type_name -> bytedance.byteplus.rec.content.Status
	3,  // 2: bytedance.byteplus.rec.content.WriteResponse.errors:type_name -> bytedance.byteplus.rec.content.DataError
	14, // 3: bytedance.byteplus.rec.content.WriteDataRequest.extra:type_name -> bytedance.byteplus.rec.content.WriteDataRequest.ExtraEntry
	15, // 4: bytedance.byteplus.rec.content.Content.extra:type_name -> bytedance.byteplus.rec.content.Content.ExtraEntry
	7,  // 5: bytedance.byteplus.rec.content.PredictRequest.scene:type_name -> bytedance.byteplus.rec.content.Scene
	16, // 6: bytedance.byteplus.rec.content.PredictRequest.content_context:type_name -> bytedance.byteplus.rec.content.PredictRequest.Context
	17, // 7: bytedance.byteplus.rec.content.PredictRequest.extra:type_name -> bytedance.byteplus.rec.content.PredictRequest.ExtraEntry
	18, // 8: bytedance.byteplus.rec.content.PredictResult.response_contents:type_name -> bytedance.byteplus.rec.content.PredictResult.ResponseContent
	19, // 9: bytedance.byteplus.rec.content.PredictResult.extra:type_name -> bytedance.byteplus.rec.content.PredictResult.ExtraEntry
	0,  // 10: bytedance.byteplus.rec.content.PredictResponse.status:type_name -> bytedance.byteplus.rec.content.Status
	10, // 11: bytedance.byteplus.rec.content.PredictResponse.content_value:type_name -> bytedance.byteplus.rec.content.PredictResult
	7,  // 12: bytedance.byteplus.rec.content.AckServerImpressionsRequest.scene:type_name -> bytedance.byteplus.rec.content.Scene
	21, // 13: bytedance.byteplus.rec.content.AckServerImpressionsRequest.altered_contents:type_name -> bytedance.byteplus.rec.content.AckServerImpressionsRequest.AlteredContent
	22, // 14: bytedance.byteplus.rec.content.AckServerImpressionsRequest.extra:type_name -> bytedance.byteplus.rec.content.AckServerImpressionsRequest.ExtraEntry
	0,  // 15: bytedance.byteplus.rec.content.AckServerImpressionsResponse.status:type_name -> bytedance.byteplus.rec.content.Status
	6,  // 16: bytedance.byteplus.rec.content.PredictRequest.Context.root_content:type_name -> bytedance.byteplus.rec.content.Content
	8,  // 17: bytedance.byteplus.rec.content.PredictRequest.Context.device:type_name -> bytedance.byteplus.rec.content.Device
	6,  // 18: bytedance.byteplus.rec.content.PredictRequest.Context.candidate_contents:type_name -> bytedance.byteplus.rec.content.Content
	20, // 19: bytedance.byteplus.rec.content.PredictResult.ResponseContent.extra:type_name -> bytedance.byteplus.rec.content.PredictResult.ResponseContent.ExtraEntry
	23, // 20: bytedance.byteplus.rec.content.AckServerImpressionsRequest.AlteredContent.extra:type_name -> bytedance.byteplus.rec.content.AckServerImpressionsRequest.AlteredContent.ExtraEntry
	5,  // 21: bytedance.byteplus.rec.content.BytePlusSaasService.WritUsers:input_type -> bytedance.byteplus.rec.content.WriteDataRequest
	5,  // 22: bytedance.byteplus.rec.content.BytePlusSaasService.WritContents:input_type -> bytedance.byteplus.rec.content.WriteDataRequest
	5,  // 23: bytedance.byteplus.rec.content.BytePlusSaasService.WritUserEvents:input_type -> bytedance.byteplus.rec.content.WriteDataRequest
	5,  // 24: bytedance.byteplus.rec.content.BytePlusSaasService.WriteOthers:input_type -> bytedance.byteplus.rec.content.WriteDataRequest
	2,  // 25: bytedance.byteplus.rec.content.BytePlusSaasService.Finish:input_type -> bytedance.byteplus.rec.content.FinishWriteDataRequest
	9,  // 26: bytedance.byteplus.rec.content.BytePlusSaasService.Predict:input_type -> bytedance.byteplus.rec.content.PredictRequest
	12, // 27: bytedance.byteplus.rec.content.BytePlusSaasService.AckServerImpressions:input_type -> bytedance.byteplus.rec.content.AckServerImpressionsRequest
	4,  // 28: bytedance.byteplus.rec.content.BytePlusSaasService.WritUsers:output_type -> bytedance.byteplus.rec.content.WriteResponse
	4,  // 29: bytedance.byteplus.rec.content.BytePlusSaasService.WritContents:output_type -> bytedance.byteplus.rec.content.WriteResponse
	4,  // 30: bytedance.byteplus.rec.content.BytePlusSaasService.WritUserEvents:output_type -> bytedance.byteplus.rec.content.WriteResponse
	4,  // 31: bytedance.byteplus.rec.content.BytePlusSaasService.WriteOthers:output_type -> bytedance.byteplus.rec.content.WriteResponse
	4,  // 32: bytedance.byteplus.rec.content.BytePlusSaasService.Finish:output_type -> bytedance.byteplus.rec.content.WriteResponse
	11, // 33: bytedance.byteplus.rec.content.BytePlusSaasService.Predict:output_type -> bytedance.byteplus.rec.content.PredictResponse
	13, // 34: bytedance.byteplus.rec.content.BytePlusSaasService.AckServerImpressions:output_type -> bytedance.byteplus.rec.content.AckServerImpressionsResponse
	28, // [28:35] is the sub-list for method output_type
	21, // [21:28] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_byteplus_saas_content_proto_init() }
func file_byteplus_saas_content_proto_init() {
	if File_byteplus_saas_content_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_byteplus_saas_content_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_content_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Date); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_content_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishWriteDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_content_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_content_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_content_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_content_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_content_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_content_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_content_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_content_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_content_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_content_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckServerImpressionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_content_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckServerImpressionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_content_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictRequest_Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_content_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictResult_ResponseContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_byteplus_saas_content_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckServerImpressionsRequest_AlteredContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_byteplus_saas_content_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_byteplus_saas_content_proto_goTypes,
		DependencyIndexes: file_byteplus_saas_content_proto_depIdxs,
		MessageInfos:      file_byteplus_saas_content_proto_msgTypes,
	}.Build()
	File_byteplus_saas_content_proto = out.File
	file_byteplus_saas_content_proto_rawDesc = nil
	file_byteplus_saas_content_proto_goTypes = nil
	file_byteplus_saas_content_proto_depIdxs = nil
}
